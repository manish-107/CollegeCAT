// This file is auto-generated by @hey-api/openapi-ts

import type { Options as ClientOptions, TDataShape, Client } from './client';
import type { SigninRedirectData, CompleteSignupData, CompleteSignupResponses, CompleteSignupErrors, LogoutUserData, LogoutUserResponses, GetCurrentUserData, GetCurrentUserResponses, GetByUserEmailData, GetByUserEmailResponses, GetByUserEmailErrors, GetAllUsersData, GetAllUsersResponses, GetUserByIdData, GetUserByIdResponses, GetUserByIdErrors, UpdateUserDetailsData, UpdateUserDetailsResponses, UpdateUserDetailsErrors, DeleteUserData, DeleteUserResponses, DeleteUserErrors, CreateYearWithBatchData, CreateYearWithBatchResponses, CreateYearWithBatchErrors, GetYearsWithBatchesData, GetYearsWithBatchesResponses, GetBatchesByYearIdData, GetBatchesByYearIdResponses, GetBatchesByYearIdErrors, CreateBatchForYearData, CreateBatchForYearResponses, CreateBatchForYearErrors, DeleteYearData, DeleteYearResponses, DeleteYearErrors, UpdateYearAndBatchesData, UpdateYearAndBatchesResponses, UpdateYearAndBatchesErrors, CreateSubjectData, CreateSubjectResponses, CreateSubjectErrors, GetSubjectsByYearData, GetSubjectsByYearResponses, GetSubjectsByYearErrors, DeleteSubjectData, DeleteSubjectResponses, DeleteSubjectErrors, GetSubjectByIdData, GetSubjectByIdResponses, GetSubjectByIdErrors, UpdateSubjectData, UpdateSubjectResponses, UpdateSubjectErrors, DeleteBatchData, DeleteBatchResponses, DeleteBatchErrors, SubmitFacultyPrioritiesData, SubmitFacultyPrioritiesResponses, SubmitFacultyPrioritiesErrors, UpdateFacultyPrioritiesData, UpdateFacultyPrioritiesResponses, UpdateFacultyPrioritiesErrors, DeleteFacultyPriorityData, DeleteFacultyPriorityResponses, DeleteFacultyPriorityErrors, GetPrioritiesByFacultyAndYearData, GetPrioritiesByFacultyAndYearResponses, GetPrioritiesByFacultyAndYearErrors, GetPriorityByFacultyYearSubjectBatchData, GetPriorityByFacultyYearSubjectBatchResponses, GetPriorityByFacultyYearSubjectBatchErrors, GetAllPrioritiesByYearData, GetAllPrioritiesByYearResponses, GetAllPrioritiesByYearErrors, AutoAllocateSubjectsForYearData, AutoAllocateSubjectsForYearResponses, AutoAllocateSubjectsForYearErrors, GetAllocatedOrderedBySeniorityData, GetAllocatedOrderedBySeniorityResponses, GetAllocatedOrderedBySeniorityErrors, GetAllocationsByYearData, GetAllocationsByYearResponses, GetAllocationsByYearErrors, UpdateAllocationsData, UpdateAllocationsResponses, UpdateAllocationsErrors, GetAllTimetableFormatsData, GetAllTimetableFormatsResponses, CreateTimetableFormatData, CreateTimetableFormatResponses, CreateTimetableFormatErrors, GetTimetableFormatsByYearData, GetTimetableFormatsByYearResponses, GetTimetableFormatsByYearErrors, GetTimetableFormatsByYearAndBatchData, GetTimetableFormatsByYearAndBatchResponses, GetTimetableFormatsByYearAndBatchErrors, DeleteTimetableFormatData, DeleteTimetableFormatResponses, DeleteTimetableFormatErrors, GetTimetableFormatByIdData, GetTimetableFormatByIdResponses, GetTimetableFormatByIdErrors, UpdateTimetableFormatData, UpdateTimetableFormatResponses, UpdateTimetableFormatErrors, CreateTimetableModuleData, CreateTimetableModuleResponses, CreateTimetableModuleErrors, GetTimetablesByYearData, GetTimetablesByYearResponses, GetTimetablesByYearErrors, GetTimetableByYearAndBatchData, GetTimetableByYearAndBatchResponses, GetTimetableByYearAndBatchErrors, DeleteTimetableModuleData, DeleteTimetableModuleResponses, DeleteTimetableModuleErrors, GetTimetableByIdData, GetTimetableByIdResponses, GetTimetableByIdErrors, UpdateTimetableModuleData, UpdateTimetableModuleResponses, UpdateTimetableModuleErrors, CreateWorkflowStageData, CreateWorkflowStageResponses, CreateWorkflowStageErrors, GetWorkflowStageByYearData, GetWorkflowStageByYearResponses, GetWorkflowStageByYearErrors, IncrementWorkflowStepData, IncrementWorkflowStepResponses, IncrementWorkflowStepErrors, CompleteWorkflowData, CompleteWorkflowResponses, CompleteWorkflowErrors, SayHelloGetData, SayHelloGetResponses } from './types.gen';
import { client as _heyApiClient } from './client.gen';

export type Options<TData extends TDataShape = TDataShape, ThrowOnError extends boolean = boolean> = ClientOptions<TData, ThrowOnError> & {
    /**
     * You can provide a client instance returned by `createClient()` instead of
     * individual options. This might be also useful if you want to implement a
     * custom client.
     */
    client?: Client;
    /**
     * You can pass arbitrary values through the `meta` object. This can be
     * used to access values that aren't defined as part of the SDK function.
     */
    meta?: Record<string, unknown>;
};

/**
 * Signin Redirect
 */
export const signinRedirect = <ThrowOnError extends boolean = false>(options?: Options<SigninRedirectData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).get<unknown, unknown, ThrowOnError>({
        url: '/api/auth/callback',
        ...options
    });
};

/**
 * Complete Signup
 */
export const completeSignup = <ThrowOnError extends boolean = false>(options: Options<CompleteSignupData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).post<CompleteSignupResponses, CompleteSignupErrors, ThrowOnError>({
        responseType: 'json',
        url: '/api/auth/signup',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options.headers
        }
    });
};

/**
 * Logout User
 */
export const logoutUser = <ThrowOnError extends boolean = false>(options?: Options<LogoutUserData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).get<LogoutUserResponses, unknown, ThrowOnError>({
        responseType: 'json',
        url: '/api/auth/logout',
        ...options
    });
};

/**
 * Get Current User
 */
export const getCurrentUser = <ThrowOnError extends boolean = false>(options?: Options<GetCurrentUserData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).get<GetCurrentUserResponses, unknown, ThrowOnError>({
        responseType: 'json',
        url: '/api/users/me',
        ...options
    });
};

/**
 * Get By User Email
 */
export const getByUserEmail = <ThrowOnError extends boolean = false>(options: Options<GetByUserEmailData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<GetByUserEmailResponses, GetByUserEmailErrors, ThrowOnError>({
        responseType: 'json',
        url: '/api/users/',
        ...options
    });
};

/**
 * Get All Users
 * Get all users with their details.
 *
 * Returns a list of all users in the system with complete user information.
 */
export const getAllUsers = <ThrowOnError extends boolean = false>(options?: Options<GetAllUsersData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).get<GetAllUsersResponses, unknown, ThrowOnError>({
        responseType: 'json',
        url: '/api/users/all',
        ...options
    });
};

/**
 * Get User By Id
 * Get user by ID.
 *
 * - **user_id**: ID of the user to retrieve
 *
 * Returns the user details if found, otherwise returns 404.
 */
export const getUserById = <ThrowOnError extends boolean = false>(options: Options<GetUserByIdData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<GetUserByIdResponses, GetUserByIdErrors, ThrowOnError>({
        responseType: 'json',
        url: '/api/users/{user_id}',
        ...options
    });
};

/**
 * Update User Details
 */
export const updateUserDetails = <ThrowOnError extends boolean = false>(options: Options<UpdateUserDetailsData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).put<UpdateUserDetailsResponses, UpdateUserDetailsErrors, ThrowOnError>({
        responseType: 'json',
        url: '/api/users/update/{user_id}',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options.headers
        }
    });
};

/**
 * Delete User
 */
export const deleteUser = <ThrowOnError extends boolean = false>(options: Options<DeleteUserData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).delete<DeleteUserResponses, DeleteUserErrors, ThrowOnError>({
        responseType: 'json',
        url: '/api/users/delete/{user_id}',
        ...options
    });
};

/**
 * Create Year With Batch
 */
export const createYearWithBatch = <ThrowOnError extends boolean = false>(options: Options<CreateYearWithBatchData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).post<CreateYearWithBatchResponses, CreateYearWithBatchErrors, ThrowOnError>({
        responseType: 'json',
        url: '/api/academic/academic-years-batch',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options.headers
        }
    });
};

/**
 * Get Years With Batches
 */
export const getYearsWithBatches = <ThrowOnError extends boolean = false>(options?: Options<GetYearsWithBatchesData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).get<GetYearsWithBatchesResponses, unknown, ThrowOnError>({
        responseType: 'json',
        url: '/api/academic/academic-years-with-batchs',
        ...options
    });
};

/**
 * Get Batches By Year Id
 */
export const getBatchesByYearId = <ThrowOnError extends boolean = false>(options: Options<GetBatchesByYearIdData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<GetBatchesByYearIdResponses, GetBatchesByYearIdErrors, ThrowOnError>({
        responseType: 'json',
        url: '/api/academic/batches/{year_id}',
        ...options
    });
};

/**
 * Create Batch For Year
 */
export const createBatchForYear = <ThrowOnError extends boolean = false>(options: Options<CreateBatchForYearData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).post<CreateBatchForYearResponses, CreateBatchForYearErrors, ThrowOnError>({
        responseType: 'json',
        url: '/api/academic/batches/{year_id}',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options.headers
        }
    });
};

/**
 * Delete Year
 */
export const deleteYear = <ThrowOnError extends boolean = false>(options: Options<DeleteYearData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).delete<DeleteYearResponses, DeleteYearErrors, ThrowOnError>({
        responseType: 'json',
        url: '/api/academic/academic-years/{year_id}',
        ...options
    });
};

/**
 * Update Year And Batches
 */
export const updateYearAndBatches = <ThrowOnError extends boolean = false>(options: Options<UpdateYearAndBatchesData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).put<UpdateYearAndBatchesResponses, UpdateYearAndBatchesErrors, ThrowOnError>({
        responseType: 'json',
        url: '/api/academic/academic-years/{year_id}',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options.headers
        }
    });
};

/**
 * Create Subject
 */
export const createSubject = <ThrowOnError extends boolean = false>(options: Options<CreateSubjectData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).post<CreateSubjectResponses, CreateSubjectErrors, ThrowOnError>({
        responseType: 'json',
        url: '/api/academic/subjects',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options.headers
        }
    });
};

/**
 * Get Subjects By Year
 */
export const getSubjectsByYear = <ThrowOnError extends boolean = false>(options: Options<GetSubjectsByYearData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<GetSubjectsByYearResponses, GetSubjectsByYearErrors, ThrowOnError>({
        responseType: 'json',
        url: '/api/academic/subjects/{year_id}',
        ...options
    });
};

/**
 * Delete Subject
 */
export const deleteSubject = <ThrowOnError extends boolean = false>(options: Options<DeleteSubjectData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).delete<DeleteSubjectResponses, DeleteSubjectErrors, ThrowOnError>({
        responseType: 'json',
        url: '/api/academic/subject/{subject_id}',
        ...options
    });
};

/**
 * Get Subject By Id
 */
export const getSubjectById = <ThrowOnError extends boolean = false>(options: Options<GetSubjectByIdData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<GetSubjectByIdResponses, GetSubjectByIdErrors, ThrowOnError>({
        responseType: 'json',
        url: '/api/academic/subject/{subject_id}',
        ...options
    });
};

/**
 * Update Subject
 */
export const updateSubject = <ThrowOnError extends boolean = false>(options: Options<UpdateSubjectData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).put<UpdateSubjectResponses, UpdateSubjectErrors, ThrowOnError>({
        responseType: 'json',
        url: '/api/academic/subject/{subject_id}',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options.headers
        }
    });
};

/**
 * Delete Batch
 */
export const deleteBatch = <ThrowOnError extends boolean = false>(options: Options<DeleteBatchData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).delete<DeleteBatchResponses, DeleteBatchErrors, ThrowOnError>({
        responseType: 'json',
        url: '/api/academic/batch/{batch_id}',
        ...options
    });
};

/**
 * Submit Priorities
 * Submit faculty subject priorities for a year
 */
export const submitFacultyPriorities = <ThrowOnError extends boolean = false>(options: Options<SubmitFacultyPrioritiesData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).post<SubmitFacultyPrioritiesResponses, SubmitFacultyPrioritiesErrors, ThrowOnError>({
        responseType: 'json',
        url: '/api/priority/submit',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options.headers
        }
    });
};

/**
 * Update Priorities
 * Update faculty subject priorities by swapping priorities between two subjects
 */
export const updateFacultyPriorities = <ThrowOnError extends boolean = false>(options: Options<UpdateFacultyPrioritiesData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).put<UpdateFacultyPrioritiesResponses, UpdateFacultyPrioritiesErrors, ThrowOnError>({
        responseType: 'json',
        url: '/api/priority/update/{faculty_id}/{year_id}',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options.headers
        }
    });
};

/**
 * Delete Priority
 * Delete a specific priority entry
 */
export const deleteFacultyPriority = <ThrowOnError extends boolean = false>(options: Options<DeleteFacultyPriorityData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).delete<DeleteFacultyPriorityResponses, DeleteFacultyPriorityErrors, ThrowOnError>({
        responseType: 'json',
        url: '/api/priority/delete/{priority_id}',
        ...options
    });
};

/**
 * Get Priorities By Faculty And Year
 * Get all priorities for a specific faculty and year
 */
export const getPrioritiesByFacultyAndYear = <ThrowOnError extends boolean = false>(options: Options<GetPrioritiesByFacultyAndYearData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<GetPrioritiesByFacultyAndYearResponses, GetPrioritiesByFacultyAndYearErrors, ThrowOnError>({
        responseType: 'json',
        url: '/api/priority/faculty/{faculty_id}/year/{year_id}',
        ...options
    });
};

/**
 * Get Priority By Faculty Year Subject Batch
 * Get a specific priority for a faculty, year, subject, and batch combination
 */
export const getPriorityByFacultyYearSubjectBatch = <ThrowOnError extends boolean = false>(options: Options<GetPriorityByFacultyYearSubjectBatchData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<GetPriorityByFacultyYearSubjectBatchResponses, GetPriorityByFacultyYearSubjectBatchErrors, ThrowOnError>({
        responseType: 'json',
        url: '/api/priority/faculty/{faculty_id}/year/{year_id}/subject/{subject_id}/batch/{batch_id}',
        ...options
    });
};

/**
 * Get All Priorities By Year
 * Get all priorities for a year with detailed information
 */
export const getAllPrioritiesByYear = <ThrowOnError extends boolean = false>(options: Options<GetAllPrioritiesByYearData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<GetAllPrioritiesByYearResponses, GetAllPrioritiesByYearErrors, ThrowOnError>({
        responseType: 'json',
        url: '/api/priority/year/{year_id}',
        ...options
    });
};

/**
 * Auto Allocate Subjects For Year
 * Automatically allocate subjects to faculty based on priorities and seniority
 */
export const autoAllocateSubjectsForYear = <ThrowOnError extends boolean = false>(options: Options<AutoAllocateSubjectsForYearData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).post<AutoAllocateSubjectsForYearResponses, AutoAllocateSubjectsForYearErrors, ThrowOnError>({
        responseType: 'json',
        url: '/api/priority/allocate-subjects/{year_id}',
        ...options
    });
};

/**
 * Get Allocated Ordered By Seniority
 * Get allocations grouped by year, batches, and subjects with allocated faculty
 */
export const getAllocatedOrderedBySeniority = <ThrowOnError extends boolean = false>(options: Options<GetAllocatedOrderedBySeniorityData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<GetAllocatedOrderedBySeniorityResponses, GetAllocatedOrderedBySeniorityErrors, ThrowOnError>({
        responseType: 'json',
        url: '/api/priority/allocated-ordered/{year_id}',
        ...options
    });
};

/**
 * Get Allocations By Year
 * Get all allocations for a specific year with details
 */
export const getAllocationsByYear = <ThrowOnError extends boolean = false>(options: Options<GetAllocationsByYearData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<GetAllocationsByYearResponses, GetAllocationsByYearErrors, ThrowOnError>({
        responseType: 'json',
        url: '/api/priority/allocations/{year_id}',
        ...options
    });
};

/**
 * Update Allocations By Year And Batch
 * Update allocation by year_id and batch_id
 */
export const updateAllocations = <ThrowOnError extends boolean = false>(options: Options<UpdateAllocationsData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).put<UpdateAllocationsResponses, UpdateAllocationsErrors, ThrowOnError>({
        responseType: 'json',
        url: '/api/priority/allocations',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options.headers
        }
    });
};

/**
 * Get All Timetable Formats
 * Get all timetable formats.
 */
export const getAllTimetableFormats = <ThrowOnError extends boolean = false>(options?: Options<GetAllTimetableFormatsData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).get<GetAllTimetableFormatsResponses, unknown, ThrowOnError>({
        responseType: 'json',
        url: '/api/timetable-formats/formats',
        ...options
    });
};

/**
 * Create Timetable Format
 * Create a new timetable format.
 *
 * - **year_id**: ID of the academic year
 * - **batch_id**: ID of the batch
 * - **format_name**: Name of the timetable format
 * - **format_data**: JSON data containing the timetable format structure
 */
export const createTimetableFormat = <ThrowOnError extends boolean = false>(options: Options<CreateTimetableFormatData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).post<CreateTimetableFormatResponses, CreateTimetableFormatErrors, ThrowOnError>({
        responseType: 'json',
        url: '/api/timetable-formats/formats',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options.headers
        }
    });
};

/**
 * Get Timetable Formats By Year
 * Get all timetable formats for a specific academic year.
 *
 * - **year_id**: ID of the academic year
 */
export const getTimetableFormatsByYear = <ThrowOnError extends boolean = false>(options: Options<GetTimetableFormatsByYearData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<GetTimetableFormatsByYearResponses, GetTimetableFormatsByYearErrors, ThrowOnError>({
        responseType: 'json',
        url: '/api/timetable-formats/formats/year/{year_id}',
        ...options
    });
};

/**
 * Get Timetable Formats By Year And Batch
 * Get all timetable formats for a specific academic year and batch.
 *
 * - **year_id**: ID of the academic year
 * - **batch_id**: ID of the batch
 */
export const getTimetableFormatsByYearAndBatch = <ThrowOnError extends boolean = false>(options: Options<GetTimetableFormatsByYearAndBatchData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<GetTimetableFormatsByYearAndBatchResponses, GetTimetableFormatsByYearAndBatchErrors, ThrowOnError>({
        responseType: 'json',
        url: '/api/timetable-formats/formats/year/{year_id}/batch/{batch_id}',
        ...options
    });
};

/**
 * Delete Timetable Format
 * Delete a timetable format.
 *
 * - **format_id**: ID of the timetable format to delete
 */
export const deleteTimetableFormat = <ThrowOnError extends boolean = false>(options: Options<DeleteTimetableFormatData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).delete<DeleteTimetableFormatResponses, DeleteTimetableFormatErrors, ThrowOnError>({
        responseType: 'json',
        url: '/api/timetable-formats/formats/{format_id}',
        ...options
    });
};

/**
 * Get Timetable Format By Id
 * Get a specific timetable format by ID.
 *
 * - **format_id**: ID of the timetable format
 */
export const getTimetableFormatById = <ThrowOnError extends boolean = false>(options: Options<GetTimetableFormatByIdData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<GetTimetableFormatByIdResponses, GetTimetableFormatByIdErrors, ThrowOnError>({
        responseType: 'json',
        url: '/api/timetable-formats/formats/{format_id}',
        ...options
    });
};

/**
 * Update Timetable Format
 * Update a timetable format.
 *
 * - **format_id**: ID of the timetable format to update
 * - **format_name**: Updated name of the timetable format (optional)
 * - **format_data**: Updated JSON data containing the timetable format structure (optional)
 */
export const updateTimetableFormat = <ThrowOnError extends boolean = false>(options: Options<UpdateTimetableFormatData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).put<UpdateTimetableFormatResponses, UpdateTimetableFormatErrors, ThrowOnError>({
        responseType: 'json',
        url: '/api/timetable-formats/formats/{format_id}',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options.headers
        }
    });
};

/**
 * Create Timetable Module
 * Create a new timetable module.
 *
 * - **format_id**: ID of the timetable format to use
 * - **year_id**: ID of the academic year
 * - **batch_id**: ID of the batch
 * - **timetable_data**: JSON structure containing daily subject schedules
 *
 * Returns the created timetable module with all related details.
 */
export const createTimetableModule = <ThrowOnError extends boolean = false>(options: Options<CreateTimetableModuleData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).post<CreateTimetableModuleResponses, CreateTimetableModuleErrors, ThrowOnError>({
        responseType: 'json',
        url: '/api/timetable-modules/',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options.headers
        }
    });
};

/**
 * Get Timetables By Year
 * Get all timetable modules for a specific academic year.
 *
 * - **year_id**: ID of the academic year
 *
 * Returns all timetables for the year with batch details, format details, and timetable details.
 */
export const getTimetablesByYear = <ThrowOnError extends boolean = false>(options: Options<GetTimetablesByYearData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<GetTimetablesByYearResponses, GetTimetablesByYearErrors, ThrowOnError>({
        responseType: 'json',
        url: '/api/timetable-modules/year/{year_id}',
        ...options
    });
};

/**
 * Get Timetable By Year And Batch
 * Get timetable module for a specific year and batch.
 *
 * - **year_id**: ID of the academic year
 * - **batch_id**: ID of the batch
 *
 * Returns the timetable with batch details, format details, and timetable details.
 */
export const getTimetableByYearAndBatch = <ThrowOnError extends boolean = false>(options: Options<GetTimetableByYearAndBatchData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<GetTimetableByYearAndBatchResponses, GetTimetableByYearAndBatchErrors, ThrowOnError>({
        responseType: 'json',
        url: '/api/timetable-modules/year/{year_id}/batch/{batch_id}',
        ...options
    });
};

/**
 * Delete Timetable Module
 * Delete a timetable module.
 *
 * - **timetable_id**: ID of the timetable to delete
 *
 * Returns confirmation of deletion.
 */
export const deleteTimetableModule = <ThrowOnError extends boolean = false>(options: Options<DeleteTimetableModuleData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).delete<DeleteTimetableModuleResponses, DeleteTimetableModuleErrors, ThrowOnError>({
        responseType: 'json',
        url: '/api/timetable-modules/{timetable_id}',
        ...options
    });
};

/**
 * Get Timetable By Id
 * Get timetable module by ID.
 *
 * - **timetable_id**: ID of the timetable
 *
 * Returns the timetable with all related details.
 */
export const getTimetableById = <ThrowOnError extends boolean = false>(options: Options<GetTimetableByIdData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<GetTimetableByIdResponses, GetTimetableByIdErrors, ThrowOnError>({
        responseType: 'json',
        url: '/api/timetable-modules/{timetable_id}',
        ...options
    });
};

/**
 * Update Timetable Module
 * Update a timetable module.
 *
 * - **timetable_id**: ID of the timetable to update
 * - **timetable_data**: Updated JSON structure containing daily subject schedules
 *
 * Returns the updated timetable module with all related details.
 */
export const updateTimetableModule = <ThrowOnError extends boolean = false>(options: Options<UpdateTimetableModuleData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).put<UpdateTimetableModuleResponses, UpdateTimetableModuleErrors, ThrowOnError>({
        responseType: 'json',
        url: '/api/timetable-modules/{timetable_id}',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options.headers
        }
    });
};

/**
 * Create Workflow Stage
 * Create a new workflow stage for an academic year
 */
export const createWorkflowStage = <ThrowOnError extends boolean = false>(options: Options<CreateWorkflowStageData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).post<CreateWorkflowStageResponses, CreateWorkflowStageErrors, ThrowOnError>({
        responseType: 'json',
        url: '/api/workflow/workflow/create',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options.headers
        }
    });
};

/**
 * Get Workflow Stage By Year
 * Get workflow stage for a specific academic year
 */
export const getWorkflowStageByYear = <ThrowOnError extends boolean = false>(options: Options<GetWorkflowStageByYearData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<GetWorkflowStageByYearResponses, GetWorkflowStageByYearErrors, ThrowOnError>({
        responseType: 'json',
        url: '/api/workflow/workflow/year/{year_id}',
        ...options
    });
};

/**
 * Increment Workflow Step
 * Increment the current workflow step by 1
 */
export const incrementWorkflowStep = <ThrowOnError extends boolean = false>(options: Options<IncrementWorkflowStepData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).put<IncrementWorkflowStepResponses, IncrementWorkflowStepErrors, ThrowOnError>({
        responseType: 'json',
        url: '/api/workflow/workflow/increment/{year_id}',
        ...options
    });
};

/**
 * Complete Workflow
 * Mark workflow as completed
 */
export const completeWorkflow = <ThrowOnError extends boolean = false>(options: Options<CompleteWorkflowData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).put<CompleteWorkflowResponses, CompleteWorkflowErrors, ThrowOnError>({
        responseType: 'json',
        url: '/api/workflow/workflow/complete/{year_id}',
        ...options
    });
};

/**
 * Say Hello
 */
export const sayHelloGet = <ThrowOnError extends boolean = false>(options?: Options<SayHelloGetData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).get<SayHelloGetResponses, unknown, ThrowOnError>({
        responseType: 'json',
        url: '/',
        ...options
    });
};