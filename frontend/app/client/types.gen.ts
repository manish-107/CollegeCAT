// This file is auto-generated by @hey-api/openapi-ts

/**
 * AcademicYearBatchCreate
 */
export type AcademicYearBatchCreate = {
    /**
     * Year
     * Academic year
     */
    year: string;
    /**
     * Batch information to create
     */
    batch: BatchBase;
};

/**
 * AcademicYearBatchUpdate
 */
export type AcademicYearBatchUpdate = {
    /**
     * Academic Year
     * Updated academic year in format YYYY-YYYY
     */
    academic_year?: string | null;
    /**
     * Batch
     * List of batch updates
     */
    batch?: Array<BatchUpdate> | null;
};

/**
 * AcademicYearDetails
 * Schema for academic year details in responses
 */
export type AcademicYearDetails = {
    /**
     * Year Id
     * Unique identifier for the academic year
     */
    year_id: number;
    /**
     * Academic Year
     * Academic year name
     */
    academic_year: string;
    /**
     * Created At
     * Timestamp when the academic year was created
     */
    created_at: string;
};

/**
 * AcademicYearWithBatchesListResponse
 */
export type AcademicYearWithBatchesListResponse = {
    /**
     * Items
     * List of academic years with their associated batches
     */
    items: Array<AcademicYearWithBatchesResponse>;
};

/**
 * AcademicYearWithBatchesResponse
 */
export type AcademicYearWithBatchesResponse = {
    /**
     * Year Id
     * Unique identifier for the academic year
     */
    year_id: number;
    /**
     * Academic Year
     * Academic year in format YYYY-YYYY
     */
    academic_year: string;
    /**
     * Batches
     * List of batches associated with this academic year
     */
    batches: Array<BatchResponse>;
};

/**
 * AllocatedBatchResponse
 */
export type AllocatedBatchResponse = {
    /**
     * Batch Id
     * ID of the batch
     */
    batch_id: number;
    /**
     * Section
     * Section name of the batch
     */
    section: string;
    /**
     * Noofstudent
     * Number of students in the batch
     */
    noOfStudent: number;
    /**
     * Subjects
     * Dictionary of subjects allocated to this batch, keyed by subject ID
     */
    subjects: {
        [key: string]: AllocatedSubjectResponse;
    };
};

/**
 * AllocatedFacultyResponse
 */
export type AllocatedFacultyResponse = {
    /**
     * Faculty Id
     * ID of the allocated faculty
     */
    faculty_id: number;
    /**
     * Uname
     * Username/name of the allocated faculty
     */
    uname: string;
    /**
     * Role
     * Role of the allocated faculty
     */
    role: string;
    /**
     * Email
     * Email address of the allocated faculty
     */
    email: string;
    /**
     * Joining Year
     * Year when the faculty joined
     */
    joining_year: number;
};

/**
 * AllocatedSubjectResponse
 */
export type AllocatedSubjectResponse = {
    /**
     * Subject Id
     * ID of the allocated subject
     */
    subject_id: number;
    /**
     * Subject Name
     * Name of the allocated subject
     */
    subject_name: string;
    /**
     * Subject Code
     * Code of the allocated subject
     */
    subject_code: string;
    /**
     * Subject Type
     * Type of allocated subject (CORE, ELECTIVE, LAB)
     */
    subject_type: string;
    /**
     * Abbreviation
     * Short abbreviation for the subject (e.g., 'DSA', 'CN', 'CA')
     */
    abbreviation: string;
    /**
     * Details of the faculty allocated to this subject
     */
    allocated_faculty: AllocatedFacultyResponse;
    /**
     * Details of the co-faculty for this allocation, if any
     */
    co_faculty?: AllocatedFacultyResponse | null;
    /**
     * Venue
     * Venue for the allocation, if any
     */
    venue?: string | null;
};

/**
 * AllocationResponse
 */
export type AllocationResponse = {
    /**
     * Allocations
     * List of academic years with their allocations
     */
    allocations: Array<AllocationYearResponse>;
};

/**
 * AllocationResultResponse
 */
export type AllocationResultResponse = {
    /**
     * Total Allocations
     * Total number of allocations made
     */
    total_allocations: number;
    /**
     * Allocations
     * List of all allocations made
     */
    allocations: Array<FacultySubjectAllocationResponse>;
};

/**
 * AllocationUpdateRequest
 */
export type AllocationUpdateRequest = {
    /**
     * Allocation Id
     * ID of the allocation to update
     */
    allocation_id: number;
    /**
     * Faculty Id
     * ID of the new faculty to assign to this allocation
     */
    faculty_id: number;
    /**
     * Co Faculty Id
     * ID of the co-faculty to assign to this allocation
     */
    co_faculty_id?: number | null;
    /**
     * Venue
     * Venue for the allocation
     */
    venue?: string | null;
};

/**
 * AllocationYearResponse
 */
export type AllocationYearResponse = {
    /**
     * Year Id
     * Academic year ID
     */
    year_id: number;
    /**
     * Year
     * Academic year in format YYYY-YYYY
     */
    year: string;
    /**
     * Batchs
     * Dictionary of batches for this year, keyed by batch ID
     */
    batchs: {
        [key: string]: AllocatedBatchResponse;
    };
};

/**
 * BatchBase
 */
export type BatchBase = {
    /**
     * Section
     * Name of the batch (e.g., 'A', 'B', 'C')
     */
    section?: string | null;
    /**
     * Noofstudent
     * Number of students in the batch
     */
    noOfStudent?: number | null;
};

/**
 * BatchCreate
 */
export type BatchCreate = {
    /**
     * Section
     * Name of the batch (e.g., 'A', 'B', 'C')
     */
    section: string;
    /**
     * Noofstudent
     * Number of students in the batch
     */
    noOfStudent: number;
};

/**
 * BatchResponse
 */
export type BatchResponse = {
    /**
     * Section
     * Name of the batch (e.g., 'A', 'B', 'C')
     */
    section?: string | null;
    /**
     * Noofstudent
     * Number of students in the batch
     */
    noOfStudent?: number | null;
    /**
     * Batch Id
     * Unique identifier for the batch
     */
    batch_id: number;
    /**
     * Created At
     * Timestamp when the batch was created
     */
    created_at: string;
};

/**
 * BatchUpdate
 */
export type BatchUpdate = {
    /**
     * Section
     * Name of the batch (e.g., 'A', 'B', 'C')
     */
    section?: string | null;
    /**
     * Noofstudent
     * Number of students in the batch
     */
    noOfStudent?: number | null;
    /**
     * Id
     * Batch ID to update
     */
    id?: number | null;
};

/**
 * BatchesListResponse
 */
export type BatchesListResponse = {
    /**
     * Batches
     * List of batches for the specified academic year
     */
    batches: Array<BatchResponse>;
};

/**
 * ErrorResponse
 */
export type ErrorResponse = {
    /**
     * Detail
     * Error message describing what went wrong
     */
    detail: string;
    /**
     * Message
     * User-friendly error message
     */
    message?: string;
    /**
     * Success
     * Indicates that the operation failed
     */
    success?: boolean;
};

/**
 * FacultyPriorityBatchResponse
 */
export type FacultyPriorityBatchResponse = {
    /**
     * Batch Id
     * ID of the batch
     */
    batch_id: number;
    /**
     * Section
     * Section name of the batch
     */
    section: string;
    /**
     * Noofstudent
     * Number of students in the batch
     */
    noOfStudent: number;
    /**
     * Subjects
     * List of subjects with priorities for this batch
     */
    subjects: Array<FacultyPrioritySubjectResponse>;
};

/**
 * FacultyPriorityDetailResponse
 */
export type FacultyPriorityDetailResponse = {
    /**
     * Year Id
     * Academic year ID
     */
    year_id: number;
    /**
     * Year
     * Academic year in format YYYY-YYYY
     */
    year: string;
    /**
     * Faculty Id
     * ID of the faculty
     */
    faculty_id: number;
    /**
     * Uname
     * Username/name of the faculty
     */
    uname: string;
    /**
     * Role
     * Role of the faculty
     */
    role: string;
    /**
     * Email
     * Email address of the faculty
     */
    email: string;
    /**
     * Joining Year
     * Year when the faculty joined
     */
    joining_year: number;
    /**
     * Batches
     * List of batches with priorities for this faculty
     */
    batches: Array<FacultyPriorityBatchResponse>;
};

/**
 * FacultyPriorityResponse
 */
export type FacultyPriorityResponse = {
    /**
     * Id
     * Unique identifier for the priority entry
     */
    id: number;
    /**
     * Faculty Id
     * ID of the faculty
     */
    faculty_id: number;
    /**
     * Subject Id
     * ID of the subject
     */
    subject_id: number;
    /**
     * Batch Id
     * ID of the batch
     */
    batch_id: number;
    /**
     * Year Id
     * Academic year ID
     */
    year_id: number;
    /**
     * Priority
     * Priority level (1-5)
     */
    priority: number;
    /**
     * Created At
     * Timestamp when the priority was created
     */
    created_at: string;
};

/**
 * FacultyPrioritySubjectResponse
 */
export type FacultyPrioritySubjectResponse = {
    /**
     * Subject Id
     * ID of the subject
     */
    subject_id: number;
    /**
     * Subject Name
     * Name of the subject
     */
    subject_name: string;
    /**
     * Subject Code
     * Code of the subject
     */
    subject_code: string;
    /**
     * Subject Type
     * Type of subject (CORE, ELECTIVE, LAB)
     */
    subject_type: string;
    /**
     * Abbreviation
     * Short abbreviation for the subject (e.g., 'DSA', 'CN', 'CA')
     */
    abbreviation: string;
    /**
     * Priority
     * Priority level (1-5)
     */
    priority: number;
};

/**
 * FacultyPrioritySubmitRequest
 */
export type FacultyPrioritySubmitRequest = {
    /**
     * Faculty Id
     * ID of the faculty submitting priorities
     */
    faculty_id: number;
    /**
     * Year Id
     * Academic year ID for the priorities
     */
    year_id: number;
    /**
     * Priorities
     * List of subject-batch priorities
     */
    priorities: Array<SubjectPriorityEntry>;
};

/**
 * FacultyPriorityUpdateRequest
 */
export type FacultyPriorityUpdateRequest = {
    /**
     * Subject1 Id
     * ID of the first subject to update
     */
    subject1_id: number;
    /**
     * Batch1 Id
     * ID of the first batch to update
     */
    batch1_id: number;
    /**
     * Priority1
     * New priority level for first subject-batch (1-5)
     */
    priority1: number;
    /**
     * Subject2 Id
     * ID of the second subject to update
     */
    subject2_id: number;
    /**
     * Batch2 Id
     * ID of the second batch to update
     */
    batch2_id: number;
    /**
     * Priority2
     * New priority level for second subject-batch (1-5)
     */
    priority2: number;
};

/**
 * FacultyPriorityWithDetailsListResponse
 */
export type FacultyPriorityWithDetailsListResponse = {
    /**
     * Priorities
     * List of faculty with their priority details
     */
    priorities: Array<FacultyPriorityWithDetailsResponse>;
};

/**
 * FacultyPriorityWithDetailsResponse
 */
export type FacultyPriorityWithDetailsResponse = {
    /**
     * Faculty Id
     * ID of the faculty
     */
    faculty_id: number;
    /**
     * Faculty Name
     * Name of the faculty
     */
    faculty_name: string;
    /**
     * Faculty Email
     * Email address of the faculty
     */
    faculty_email: string;
    /**
     * Year Id
     * Academic year ID
     */
    year_id: number;
    /**
     * Academic Year
     * Academic year in format YYYY-YYYY
     */
    academic_year: string;
    /**
     * Priority Subjects
     * List of subjects with priorities
     */
    priority_subjects: Array<PrioritySubjectResponse>;
};

/**
 * FacultySubjectAllocationListResponse
 */
export type FacultySubjectAllocationListResponse = {
    /**
     * Allocations
     * List of subject allocations
     */
    allocations: Array<FacultySubjectAllocationResponse>;
};

/**
 * FacultySubjectAllocationResponse
 */
export type FacultySubjectAllocationResponse = {
    /**
     * Allocation Id
     * Unique identifier for the allocation
     */
    allocation_id: number;
    /**
     * Faculty Id
     * ID of the allocated faculty
     */
    faculty_id: number;
    /**
     * Faculty Name
     * Name of the allocated faculty
     */
    faculty_name: string;
    /**
     * Faculty Email
     * Email address of the allocated faculty
     */
    faculty_email: string;
    /**
     * Subject Id
     * ID of the allocated subject
     */
    subject_id: number;
    /**
     * Subject Name
     * Name of the allocated subject
     */
    subject_name: string;
    /**
     * Subject Code
     * Code of the allocated subject
     */
    subject_code: string;
    /**
     * Subject Type
     * Type of allocated subject (CORE, ELECTIVE, LAB)
     */
    subject_type: string;
    /**
     * Abbreviation
     * Short abbreviation for the subject (e.g., 'DSA', 'CN', 'CA')
     */
    abbreviation: string;
    /**
     * Batch Id
     * ID of the allocated batch
     */
    batch_id: number;
    /**
     * Batch Section
     * Section name of the allocated batch
     */
    batch_section: string;
    /**
     * Batch Noofstudent
     * Number of students in the allocated batch
     */
    batch_noOfStudent: number;
    /**
     * Year Id
     * Academic year ID
     */
    year_id: number;
    /**
     * Academic Year
     * Academic year in format YYYY-YYYY
     */
    academic_year: string;
    /**
     * Allocated Priority
     * Priority level that was allocated (1-5)
     */
    allocated_priority: number;
    /**
     * Created At
     * Timestamp when the allocation was created
     */
    created_at: string;
    /**
     * Co Faculty Id
     * ID of the co-faculty for this allocation, if any
     */
    co_faculty_id?: number | null;
    /**
     * Venue
     * Venue for the allocation, if any
     */
    venue?: string | null;
};

/**
 * HTTPValidationError
 */
export type HttpValidationError = {
    /**
     * Detail
     */
    detail?: Array<ValidationError>;
};

/**
 * MessageResponse
 */
export type MessageResponse = {
    /**
     * Message
     * Response message
     */
    message?: string;
    /**
     * Success
     * Indicates if the operation was successful
     */
    success?: boolean;
};

/**
 * PrioritySubjectResponse
 */
export type PrioritySubjectResponse = {
    /**
     * Id
     * Unique identifier for the priority entry
     */
    id: number;
    /**
     * Subject Id
     * ID of the subject
     */
    subject_id: number;
    /**
     * Subject Name
     * Name of the subject
     */
    subject_name: string;
    /**
     * Subject Code
     * Code of the subject
     */
    subject_code: string;
    /**
     * Subject Type
     * Type of subject (CORE, ELECTIVE, LAB)
     */
    subject_type: string;
    /**
     * Abbreviation
     * Short abbreviation for the subject (e.g., 'DSA', 'CN', 'CA')
     */
    abbreviation: string;
    /**
     * Batch Id
     * ID of the batch
     */
    batch_id: number;
    /**
     * Batch Section
     * Section name of the batch
     */
    batch_section: string;
    /**
     * Batch Noofstudent
     * Number of students in the batch
     */
    batch_noOfStudent: number;
    /**
     * Priority
     * Priority level (1-5)
     */
    priority: number;
    /**
     * Created At
     * Timestamp when the priority was created
     */
    created_at: string;
};

/**
 * RoleEnum
 */
export type RoleEnum = 'HOD' | 'TIMETABLE_COORDINATOR' | 'FACULTY';

/**
 * SubjectCreate
 */
export type SubjectCreate = {
    /**
     * Subject Name
     * Name of the subject (e.g., 'Data Structures', 'Machine Learning')
     */
    subject_name: string;
    /**
     * Subject Code
     * Unique code for the subject (e.g., 'CS101', 'ML2023')
     */
    subject_code: string;
    /**
     * Abbreviation
     * Short abbreviation for the subject (e.g., 'DSA', 'CN', 'CA')
     */
    abbreviation: string;
    /**
     * Type of subject: CORE, ELECTIVE, or LAB
     */
    subject_type: SubjectTypeEnum;
    /**
     * No Of Hours Required
     * Number of hours required for the subject
     */
    no_of_hours_required: number;
    /**
     * Year Id
     * Associated academic year ID
     */
    year_id: number;
};

/**
 * SubjectDetailResponse
 */
export type SubjectDetailResponse = {
    /**
     * Subject Name
     * Name of the subject (e.g., 'Data Structures', 'Machine Learning')
     */
    subject_name: string;
    /**
     * Subject Code
     * Unique code for the subject (e.g., 'CS101', 'ML2023')
     */
    subject_code: string;
    /**
     * Abbreviation
     * Short abbreviation for the subject (e.g., 'DSA', 'CN', 'CA')
     */
    abbreviation: string;
    /**
     * Type of subject: CORE, ELECTIVE, or LAB
     */
    subject_type: SubjectTypeEnum;
    /**
     * No Of Hours Required
     * Number of hours required for the subject
     */
    no_of_hours_required: number;
    /**
     * Year Id
     * Associated academic year ID
     */
    year_id: number;
    /**
     * Subject Id
     * Unique identifier for the subject
     */
    subject_id: number;
    /**
     * Created At
     * Timestamp when the subject was created
     */
    created_at: string;
};

/**
 * SubjectPriorityEntry
 */
export type SubjectPriorityEntry = {
    /**
     * Subject Id
     * ID of the subject for which priority is set
     */
    subject_id: number;
    /**
     * Batch Id
     * ID of the batch for which priority is set
     */
    batch_id: number;
    /**
     * Priority
     * Priority level from 1 (highest) to 5 (lowest)
     */
    priority: number;
};

/**
 * SubjectResponse
 */
export type SubjectResponse = {
    /**
     * Subject Name
     * Name of the subject (e.g., 'Data Structures', 'Machine Learning')
     */
    subject_name: string;
    /**
     * Subject Code
     * Unique code for the subject (e.g., 'CS101', 'ML2023')
     */
    subject_code: string;
    /**
     * Abbreviation
     * Short abbreviation for the subject (e.g., 'DSA', 'CN', 'CA')
     */
    abbreviation: string;
    /**
     * Type of subject: CORE, ELECTIVE, or LAB
     */
    subject_type: SubjectTypeEnum;
    /**
     * No Of Hours Required
     * Number of hours required for the subject
     */
    no_of_hours_required: number;
    /**
     * Year Id
     * Associated academic year ID
     */
    year_id: number;
    /**
     * Subject Id
     * Unique identifier for the subject
     */
    subject_id: number;
    /**
     * Created At
     * Timestamp when the subject was created
     */
    created_at: string;
};

/**
 * SubjectTypeEnum
 */
export type SubjectTypeEnum = 'CORE' | 'ELECTIVE' | 'LAB';

/**
 * SubjectUpdate
 */
export type SubjectUpdate = {
    /**
     * Subject Name
     * Updated name of the subject
     */
    subject_name?: string | null;
    /**
     * Subject Code
     * Updated unique code for the subject
     */
    subject_code?: string | null;
    /**
     * Abbreviation
     * Updated abbreviation for the subject
     */
    abbreviation?: string | null;
    /**
     * Updated type of subject
     */
    subject_type?: SubjectTypeEnum | null;
    /**
     * No Of Hours Required
     * Updated number of hours required
     */
    no_of_hours_required?: number | null;
};

/**
 * SubjectsListResponse
 */
export type SubjectsListResponse = {
    /**
     * Subjects
     * List of subjects for the specified academic year
     */
    subjects: Array<SubjectResponse>;
};

/**
 * SuccessResponse
 */
export type SuccessResponse = {
    /**
     * Message
     * Success message describing the operation
     */
    message: string;
    /**
     * Success
     * Indicates if the operation was successful
     */
    success?: boolean;
    /**
     * Data
     * Data returned by the operation
     */
    data?: unknown;
};

/**
 * TimetableFormatCreate
 * Schema for creating a new timetable format
 */
export type TimetableFormatCreate = {
    /**
     * Year Id
     * ID of the academic year
     */
    year_id: number;
    /**
     * Batch Id
     * ID of the batch
     */
    batch_id: number;
    /**
     * Format Name
     * Name of the timetable format
     */
    format_name: string;
    /**
     * Format Data
     * JSON data containing the timetable format structure with day arrays of period numbers
     */
    format_data: {
        [key: string]: Array<number>;
    };
};

/**
 * TimetableFormatDetails
 * Schema for timetable format details in responses
 */
export type TimetableFormatDetails = {
    /**
     * Format Id
     * Unique identifier for the timetable format
     */
    format_id: number;
    /**
     * Format Name
     * Name of the timetable format
     */
    format_name: string;
    /**
     * Format Data
     * JSON data containing the timetable format structure with day arrays of period numbers
     */
    format_data: {
        [key: string]: Array<number>;
    };
    /**
     * Created At
     * Timestamp when the format was created
     */
    created_at: string;
};

/**
 * TimetableFormatResponse
 * Schema for timetable format response
 */
export type TimetableFormatResponse = {
    /**
     * Format Id
     * Unique identifier for the timetable format
     */
    format_id: number;
    /**
     * Format Name
     * Name of the timetable format
     */
    format_name: string;
    /**
     * Format Data
     * JSON data containing the timetable format structure with day arrays of period numbers
     */
    format_data: {
        [key: string]: Array<number>;
    };
    /**
     * Created At
     * Timestamp when the format was created
     */
    created_at: string;
    /**
     * Details of the academic year
     */
    year_details: YearDetails;
    /**
     * Details of the batch
     */
    batch_details: AppSchemasTimetableSchemaBatchDetails;
};

/**
 * TimetableFormatUpdate
 * Schema for updating a timetable format
 */
export type TimetableFormatUpdate = {
    /**
     * Format Name
     * Name of the timetable format
     */
    format_name?: string | null;
    /**
     * Format Data
     * JSON data containing the updated timetable format structure with day arrays of period numbers
     */
    format_data?: {
        [key: string]: Array<number>;
    } | null;
};

/**
 * TimetableModuleCreate
 * Schema for creating a new timetable module
 */
export type TimetableModuleCreate = {
    /**
     * Format Id
     * ID of the timetable format to use
     */
    format_id: number;
    /**
     * Year Id
     * ID of the academic year
     */
    year_id: number;
    /**
     * Batch Id
     * ID of the batch
     */
    batch_id: number;
    /**
     * Timetable Data
     * JSON structure containing daily subject schedules
     */
    timetable_data: {
        [key: string]: Array<string>;
    };
};

/**
 * TimetableModuleListResponse
 * Schema for list of timetable modules response
 */
export type TimetableModuleListResponse = {
    /**
     * Timetables
     * List of timetable modules
     */
    timetables: Array<TimetableModuleResponse>;
    /**
     * Total Count
     * Total number of timetables
     */
    total_count: number;
};

/**
 * TimetableModuleResponse
 * Schema for timetable module response
 */
export type TimetableModuleResponse = {
    /**
     * Timetable Id
     * Unique identifier for the timetable
     */
    timetable_id: number;
    /**
     * Format Id
     * ID of the timetable format used
     */
    format_id: number;
    /**
     * Year Id
     * ID of the academic year
     */
    year_id: number;
    /**
     * Batch Id
     * ID of the batch
     */
    batch_id: number;
    /**
     * Timetable Data
     * JSON structure containing daily subject schedules
     */
    timetable_data: {
        [key: string]: Array<string>;
    };
    /**
     * Created At
     * Timestamp when the timetable was created
     */
    created_at: string;
    /**
     * Details of the timetable format
     */
    format_details: TimetableFormatDetails;
    /**
     * Details of the batch
     */
    batch_details: AppSchemasTimetableModuleSchemaBatchDetails;
    /**
     * Details of the academic year
     */
    academic_year_details: AcademicYearDetails;
};

/**
 * TimetableModuleUpdate
 * Schema for updating a timetable module
 */
export type TimetableModuleUpdate = {
    /**
     * Timetable Data
     * Updated JSON structure containing daily subject schedules
     */
    timetable_data: {
        [key: string]: Array<string>;
    };
};

/**
 * UpdateUserData
 */
export type UpdateUserData = {
    /**
     * Uname
     * Full name of the user
     */
    uname?: string | null;
    /**
     * Role of the user in the system
     */
    role?: RoleEnum | null;
    /**
     * Joining Year
     * The academic year in which the user joined (e.g., 2023).
     */
    joining_year?: number | null;
    /**
     * Is Active
     * Indicates whether the user is active.
     */
    is_active?: boolean | null;
};

/**
 * UserResponse
 */
export type UserResponse = {
    /**
     * User Id
     */
    user_id: number;
    /**
     * Uname
     * Full name of the user
     */
    uname?: string;
    /**
     * Email
     */
    email: string;
    /**
     * Role of the user in the system
     */
    role?: RoleEnum;
    /**
     * Oauth Provider
     */
    oauth_provider: string;
    /**
     * Joining Year
     * The academic year in which the user joined (e.g., 2023).
     */
    joining_year?: number;
    /**
     * Is Active
     * Indicates whether the user is active.
     */
    is_active?: boolean;
    /**
     * Created At
     */
    created_at: string;
};

/**
 * ValidationError
 */
export type ValidationError = {
    /**
     * Location
     */
    loc: Array<string | number>;
    /**
     * Message
     */
    msg: string;
    /**
     * Error Type
     */
    type: string;
};

/**
 * WorkflowStageCreate
 */
export type WorkflowStageCreate = {
    /**
     * Year Id
     * Academic year ID
     */
    year_id: number;
    /**
     * Current Step
     * Current workflow step (1-12)
     */
    current_step: number;
    /**
     * Is Completed
     * Whether the workflow is completed
     */
    is_completed?: boolean;
};

/**
 * YearDetails
 * Schema for academic year details
 */
export type YearDetails = {
    /**
     * Year Id
     * Unique identifier for the academic year
     */
    year_id: number;
    /**
     * Academic Year
     * Academic year name
     */
    academic_year: string;
    /**
     * Created At
     * Timestamp when the academic year was created
     */
    created_at: string;
};

/**
 * BatchDetails
 * Schema for batch details in responses
 */
export type AppSchemasTimetableModuleSchemaBatchDetails = {
    /**
     * Batch Id
     * Unique identifier for the batch
     */
    batch_id: number;
    /**
     * Section
     * Section name of the batch
     */
    section: string;
    /**
     * Noofstudent
     * Number of students in the batch
     */
    noOfStudent: number;
    /**
     * Created At
     * Timestamp when the batch was created
     */
    created_at: string;
};

/**
 * BatchDetails
 * Schema for batch details
 */
export type AppSchemasTimetableSchemaBatchDetails = {
    /**
     * Batch Id
     * Unique identifier for the batch
     */
    batch_id: number;
    /**
     * Section
     * Section name of the batch
     */
    section: string;
    /**
     * Noofstudent
     * Number of students in the batch
     */
    noOfStudent: number;
    /**
     * Created At
     * Timestamp when the batch was created
     */
    created_at: string;
};

/**
 * signupData
 */
export type SignupData = {
    /**
     * Uname
     * Full name of the user
     */
    uname?: string;
    /**
     * Role of the user in the system
     */
    role?: RoleEnum;
    /**
     * Joining Year
     * The academic year in which the user joined (e.g., 2023).
     */
    joining_year?: number;
};

export type SigninRedirectData = {
    body?: never;
    path?: never;
    query?: never;
    url: '/api/auth/callback';
};

export type CompleteSignupData = {
    body: SignupData;
    path?: never;
    query?: never;
    url: '/api/auth/signup';
};

export type CompleteSignupErrors = {
    /**
     * Validation Error
     */
    422: HttpValidationError;
};

export type CompleteSignupError = CompleteSignupErrors[keyof CompleteSignupErrors];

export type CompleteSignupResponses = {
    /**
     * Successful Response
     */
    200: unknown;
};

export type LogoutUserData = {
    body?: never;
    path?: never;
    query?: never;
    url: '/api/auth/logout';
};

export type LogoutUserResponses = {
    /**
     * Successful Response
     */
    200: unknown;
};

export type GetCurrentUserData = {
    body?: never;
    path?: never;
    query?: never;
    url: '/api/users/me';
};

export type GetCurrentUserResponses = {
    /**
     * Successful Response
     */
    200: unknown;
};

export type GetByUserEmailData = {
    body?: never;
    path?: never;
    query: {
        /**
         * Email
         */
        email: string;
    };
    url: '/api/users/';
};

export type GetByUserEmailErrors = {
    /**
     * Validation Error
     */
    422: HttpValidationError;
};

export type GetByUserEmailError = GetByUserEmailErrors[keyof GetByUserEmailErrors];

export type GetByUserEmailResponses = {
    /**
     * Successful Response
     */
    200: UserResponse;
};

export type GetByUserEmailResponse = GetByUserEmailResponses[keyof GetByUserEmailResponses];

export type GetAllUsersData = {
    body?: never;
    path?: never;
    query?: never;
    url: '/api/users/all';
};

export type GetAllUsersResponses = {
    /**
     * Response Get All Users
     * Successful Response
     */
    200: Array<UserResponse>;
};

export type GetAllUsersResponse = GetAllUsersResponses[keyof GetAllUsersResponses];

export type GetUserByIdData = {
    body?: never;
    path: {
        /**
         * User Id
         * ID of the user
         */
        user_id: number;
    };
    query?: never;
    url: '/api/users/{user_id}';
};

export type GetUserByIdErrors = {
    /**
     * Validation Error
     */
    422: HttpValidationError;
};

export type GetUserByIdError = GetUserByIdErrors[keyof GetUserByIdErrors];

export type GetUserByIdResponses = {
    /**
     * Successful Response
     */
    200: UserResponse;
};

export type GetUserByIdResponse = GetUserByIdResponses[keyof GetUserByIdResponses];

export type UpdateUserDetailsData = {
    body: UpdateUserData;
    path: {
        /**
         * User Id
         * ID of the user
         */
        user_id: number;
    };
    query?: never;
    url: '/api/users/update/{user_id}';
};

export type UpdateUserDetailsErrors = {
    /**
     * Validation Error
     */
    422: HttpValidationError;
};

export type UpdateUserDetailsError = UpdateUserDetailsErrors[keyof UpdateUserDetailsErrors];

export type UpdateUserDetailsResponses = {
    /**
     * Successful Response
     */
    200: SuccessResponse;
};

export type UpdateUserDetailsResponse = UpdateUserDetailsResponses[keyof UpdateUserDetailsResponses];

export type DeleteUserData = {
    body?: never;
    path: {
        /**
         * User Id
         * ID of the user
         */
        user_id: number;
    };
    query?: never;
    url: '/api/users/delete/{user_id}';
};

export type DeleteUserErrors = {
    /**
     * Validation Error
     */
    422: HttpValidationError;
};

export type DeleteUserError = DeleteUserErrors[keyof DeleteUserErrors];

export type DeleteUserResponses = {
    /**
     * Successful Response
     */
    200: SuccessResponse;
};

export type DeleteUserResponse = DeleteUserResponses[keyof DeleteUserResponses];

export type CreateYearWithBatchData = {
    body: AcademicYearBatchCreate;
    path?: never;
    query?: never;
    url: '/api/academic/academic-years-batch';
};

export type CreateYearWithBatchErrors = {
    /**
     * Validation Error
     */
    422: HttpValidationError;
};

export type CreateYearWithBatchError = CreateYearWithBatchErrors[keyof CreateYearWithBatchErrors];

export type CreateYearWithBatchResponses = {
    /**
     * Successful Response
     */
    200: SuccessResponse;
};

export type CreateYearWithBatchResponse = CreateYearWithBatchResponses[keyof CreateYearWithBatchResponses];

export type GetYearsWithBatchesData = {
    body?: never;
    path?: never;
    query?: never;
    url: '/api/academic/academic-years-with-batchs';
};

export type GetYearsWithBatchesResponses = {
    /**
     * Successful Response
     */
    200: AcademicYearWithBatchesListResponse;
};

export type GetYearsWithBatchesResponse = GetYearsWithBatchesResponses[keyof GetYearsWithBatchesResponses];

export type GetBatchesByYearIdData = {
    body?: never;
    path: {
        /**
         * Year Id
         */
        year_id: number;
    };
    query?: never;
    url: '/api/academic/batches/{year_id}';
};

export type GetBatchesByYearIdErrors = {
    /**
     * Validation Error
     */
    422: HttpValidationError;
};

export type GetBatchesByYearIdError = GetBatchesByYearIdErrors[keyof GetBatchesByYearIdErrors];

export type GetBatchesByYearIdResponses = {
    /**
     * Successful Response
     */
    200: BatchesListResponse;
};

export type GetBatchesByYearIdResponse = GetBatchesByYearIdResponses[keyof GetBatchesByYearIdResponses];

export type CreateBatchForYearData = {
    body: BatchCreate;
    path: {
        /**
         * Year Id
         */
        year_id: number;
    };
    query?: never;
    url: '/api/academic/batches/{year_id}';
};

export type CreateBatchForYearErrors = {
    /**
     * Validation Error
     */
    422: HttpValidationError;
};

export type CreateBatchForYearError = CreateBatchForYearErrors[keyof CreateBatchForYearErrors];

export type CreateBatchForYearResponses = {
    /**
     * Successful Response
     */
    200: SuccessResponse;
};

export type CreateBatchForYearResponse = CreateBatchForYearResponses[keyof CreateBatchForYearResponses];

export type DeleteYearData = {
    body?: never;
    path: {
        /**
         * Year Id
         */
        year_id: number;
    };
    query?: never;
    url: '/api/academic/academic-years/{year_id}';
};

export type DeleteYearErrors = {
    /**
     * Validation Error
     */
    422: HttpValidationError;
};

export type DeleteYearError = DeleteYearErrors[keyof DeleteYearErrors];

export type DeleteYearResponses = {
    /**
     * Response Delete Year
     * Successful Response
     */
    200: MessageResponse | ErrorResponse;
};

export type DeleteYearResponse = DeleteYearResponses[keyof DeleteYearResponses];

export type UpdateYearAndBatchesData = {
    body: AcademicYearBatchUpdate;
    path: {
        /**
         * Year Id
         * The ID of the academic year to update
         */
        year_id: number;
    };
    query?: never;
    url: '/api/academic/academic-years/{year_id}';
};

export type UpdateYearAndBatchesErrors = {
    /**
     * Validation Error
     */
    422: HttpValidationError;
};

export type UpdateYearAndBatchesError = UpdateYearAndBatchesErrors[keyof UpdateYearAndBatchesErrors];

export type UpdateYearAndBatchesResponses = {
    /**
     * Successful Response
     */
    200: SuccessResponse;
};

export type UpdateYearAndBatchesResponse = UpdateYearAndBatchesResponses[keyof UpdateYearAndBatchesResponses];

export type CreateSubjectData = {
    body: SubjectCreate;
    path?: never;
    query?: never;
    url: '/api/academic/subjects';
};

export type CreateSubjectErrors = {
    /**
     * Validation Error
     */
    422: HttpValidationError;
};

export type CreateSubjectError = CreateSubjectErrors[keyof CreateSubjectErrors];

export type CreateSubjectResponses = {
    /**
     * Successful Response
     */
    200: SuccessResponse;
};

export type CreateSubjectResponse = CreateSubjectResponses[keyof CreateSubjectResponses];

export type GetSubjectsByYearData = {
    body?: never;
    path: {
        /**
         * Year Id
         */
        year_id: number;
    };
    query?: never;
    url: '/api/academic/subjects/{year_id}';
};

export type GetSubjectsByYearErrors = {
    /**
     * Validation Error
     */
    422: HttpValidationError;
};

export type GetSubjectsByYearError = GetSubjectsByYearErrors[keyof GetSubjectsByYearErrors];

export type GetSubjectsByYearResponses = {
    /**
     * Successful Response
     */
    200: SubjectsListResponse;
};

export type GetSubjectsByYearResponse = GetSubjectsByYearResponses[keyof GetSubjectsByYearResponses];

export type DeleteSubjectData = {
    body?: never;
    path: {
        /**
         * Subject Id
         */
        subject_id: number;
    };
    query?: never;
    url: '/api/academic/subject/{subject_id}';
};

export type DeleteSubjectErrors = {
    /**
     * Validation Error
     */
    422: HttpValidationError;
};

export type DeleteSubjectError = DeleteSubjectErrors[keyof DeleteSubjectErrors];

export type DeleteSubjectResponses = {
    /**
     * Successful Response
     */
    200: SuccessResponse;
};

export type DeleteSubjectResponse = DeleteSubjectResponses[keyof DeleteSubjectResponses];

export type GetSubjectByIdData = {
    body?: never;
    path: {
        /**
         * Subject Id
         */
        subject_id: number;
    };
    query?: never;
    url: '/api/academic/subject/{subject_id}';
};

export type GetSubjectByIdErrors = {
    /**
     * Validation Error
     */
    422: HttpValidationError;
};

export type GetSubjectByIdError = GetSubjectByIdErrors[keyof GetSubjectByIdErrors];

export type GetSubjectByIdResponses = {
    /**
     * Successful Response
     */
    200: SubjectDetailResponse;
};

export type GetSubjectByIdResponse = GetSubjectByIdResponses[keyof GetSubjectByIdResponses];

export type UpdateSubjectData = {
    body: SubjectUpdate;
    path: {
        /**
         * Subject Id
         */
        subject_id: number;
    };
    query?: never;
    url: '/api/academic/subject/{subject_id}';
};

export type UpdateSubjectErrors = {
    /**
     * Validation Error
     */
    422: HttpValidationError;
};

export type UpdateSubjectError = UpdateSubjectErrors[keyof UpdateSubjectErrors];

export type UpdateSubjectResponses = {
    /**
     * Successful Response
     */
    200: SuccessResponse;
};

export type UpdateSubjectResponse = UpdateSubjectResponses[keyof UpdateSubjectResponses];

export type DeleteBatchData = {
    body?: never;
    path: {
        /**
         * Batch Id
         */
        batch_id: number;
    };
    query?: never;
    url: '/api/academic/batch/{batch_id}';
};

export type DeleteBatchErrors = {
    /**
     * Validation Error
     */
    422: HttpValidationError;
};

export type DeleteBatchError = DeleteBatchErrors[keyof DeleteBatchErrors];

export type DeleteBatchResponses = {
    /**
     * Successful Response
     */
    200: SuccessResponse;
};

export type DeleteBatchResponse = DeleteBatchResponses[keyof DeleteBatchResponses];

export type SubmitFacultyPrioritiesData = {
    body: FacultyPrioritySubmitRequest;
    path?: never;
    query?: never;
    url: '/api/priority/submit';
};

export type SubmitFacultyPrioritiesErrors = {
    /**
     * Validation Error
     */
    422: HttpValidationError;
};

export type SubmitFacultyPrioritiesError = SubmitFacultyPrioritiesErrors[keyof SubmitFacultyPrioritiesErrors];

export type SubmitFacultyPrioritiesResponses = {
    /**
     * Successful Response
     */
    200: SuccessResponse;
};

export type SubmitFacultyPrioritiesResponse = SubmitFacultyPrioritiesResponses[keyof SubmitFacultyPrioritiesResponses];

export type UpdateFacultyPrioritiesData = {
    body: FacultyPriorityUpdateRequest;
    path: {
        /**
         * Faculty Id
         * ID of the faculty
         */
        faculty_id: number;
        /**
         * Year Id
         * ID of the year
         */
        year_id: number;
    };
    query?: never;
    url: '/api/priority/update/{faculty_id}/{year_id}';
};

export type UpdateFacultyPrioritiesErrors = {
    /**
     * Validation Error
     */
    422: HttpValidationError;
};

export type UpdateFacultyPrioritiesError = UpdateFacultyPrioritiesErrors[keyof UpdateFacultyPrioritiesErrors];

export type UpdateFacultyPrioritiesResponses = {
    /**
     * Successful Response
     */
    200: SuccessResponse;
};

export type UpdateFacultyPrioritiesResponse = UpdateFacultyPrioritiesResponses[keyof UpdateFacultyPrioritiesResponses];

export type DeleteFacultyPriorityData = {
    body?: never;
    path: {
        /**
         * Priority Id
         * ID of the priority
         */
        priority_id: number;
    };
    query?: never;
    url: '/api/priority/delete/{priority_id}';
};

export type DeleteFacultyPriorityErrors = {
    /**
     * Validation Error
     */
    422: HttpValidationError;
};

export type DeleteFacultyPriorityError = DeleteFacultyPriorityErrors[keyof DeleteFacultyPriorityErrors];

export type DeleteFacultyPriorityResponses = {
    /**
     * Successful Response
     */
    200: SuccessResponse;
};

export type DeleteFacultyPriorityResponse = DeleteFacultyPriorityResponses[keyof DeleteFacultyPriorityResponses];

export type GetPrioritiesByFacultyAndYearData = {
    body?: never;
    path: {
        /**
         * Faculty Id
         * ID of the faculty
         */
        faculty_id: number;
        /**
         * Year Id
         * ID of the year
         */
        year_id: number;
    };
    query?: never;
    url: '/api/priority/faculty/{faculty_id}/year/{year_id}';
};

export type GetPrioritiesByFacultyAndYearErrors = {
    /**
     * Validation Error
     */
    422: HttpValidationError;
};

export type GetPrioritiesByFacultyAndYearError = GetPrioritiesByFacultyAndYearErrors[keyof GetPrioritiesByFacultyAndYearErrors];

export type GetPrioritiesByFacultyAndYearResponses = {
    /**
     * Successful Response
     */
    200: FacultyPriorityDetailResponse;
};

export type GetPrioritiesByFacultyAndYearResponse = GetPrioritiesByFacultyAndYearResponses[keyof GetPrioritiesByFacultyAndYearResponses];

export type GetPriorityByFacultyYearSubjectBatchData = {
    body?: never;
    path: {
        /**
         * Faculty Id
         * ID of the faculty
         */
        faculty_id: number;
        /**
         * Year Id
         * ID of the year
         */
        year_id: number;
        /**
         * Subject Id
         * ID of the subject
         */
        subject_id: number;
        /**
         * Batch Id
         * ID of the batch
         */
        batch_id: number;
    };
    query?: never;
    url: '/api/priority/faculty/{faculty_id}/year/{year_id}/subject/{subject_id}/batch/{batch_id}';
};

export type GetPriorityByFacultyYearSubjectBatchErrors = {
    /**
     * Validation Error
     */
    422: HttpValidationError;
};

export type GetPriorityByFacultyYearSubjectBatchError = GetPriorityByFacultyYearSubjectBatchErrors[keyof GetPriorityByFacultyYearSubjectBatchErrors];

export type GetPriorityByFacultyYearSubjectBatchResponses = {
    /**
     * Successful Response
     */
    200: FacultyPriorityResponse;
};

export type GetPriorityByFacultyYearSubjectBatchResponse = GetPriorityByFacultyYearSubjectBatchResponses[keyof GetPriorityByFacultyYearSubjectBatchResponses];

export type GetAllPrioritiesByYearData = {
    body?: never;
    path: {
        /**
         * Year Id
         * ID of the year
         */
        year_id: number;
    };
    query?: never;
    url: '/api/priority/year/{year_id}';
};

export type GetAllPrioritiesByYearErrors = {
    /**
     * Validation Error
     */
    422: HttpValidationError;
};

export type GetAllPrioritiesByYearError = GetAllPrioritiesByYearErrors[keyof GetAllPrioritiesByYearErrors];

export type GetAllPrioritiesByYearResponses = {
    /**
     * Successful Response
     */
    200: FacultyPriorityWithDetailsListResponse;
};

export type GetAllPrioritiesByYearResponse = GetAllPrioritiesByYearResponses[keyof GetAllPrioritiesByYearResponses];

export type AutoAllocateSubjectsForYearData = {
    body?: never;
    path: {
        /**
         * Year Id
         * ID of the year
         */
        year_id: number;
    };
    query?: never;
    url: '/api/priority/allocate-subjects/{year_id}';
};

export type AutoAllocateSubjectsForYearErrors = {
    /**
     * Validation Error
     */
    422: HttpValidationError;
};

export type AutoAllocateSubjectsForYearError = AutoAllocateSubjectsForYearErrors[keyof AutoAllocateSubjectsForYearErrors];

export type AutoAllocateSubjectsForYearResponses = {
    /**
     * Successful Response
     */
    200: AllocationResultResponse;
};

export type AutoAllocateSubjectsForYearResponse = AutoAllocateSubjectsForYearResponses[keyof AutoAllocateSubjectsForYearResponses];

export type GetAllocatedOrderedBySeniorityData = {
    body?: never;
    path: {
        /**
         * Year Id
         * ID of the year
         */
        year_id: number;
    };
    query?: never;
    url: '/api/priority/allocated-ordered/{year_id}';
};

export type GetAllocatedOrderedBySeniorityErrors = {
    /**
     * Validation Error
     */
    422: HttpValidationError;
};

export type GetAllocatedOrderedBySeniorityError = GetAllocatedOrderedBySeniorityErrors[keyof GetAllocatedOrderedBySeniorityErrors];

export type GetAllocatedOrderedBySeniorityResponses = {
    /**
     * Successful Response
     */
    200: AllocationResponse;
};

export type GetAllocatedOrderedBySeniorityResponse = GetAllocatedOrderedBySeniorityResponses[keyof GetAllocatedOrderedBySeniorityResponses];

export type GetAllocationsByYearData = {
    body?: never;
    path: {
        /**
         * Year Id
         * ID of the year
         */
        year_id: number;
    };
    query?: never;
    url: '/api/priority/allocations/{year_id}';
};

export type GetAllocationsByYearErrors = {
    /**
     * Validation Error
     */
    422: HttpValidationError;
};

export type GetAllocationsByYearError = GetAllocationsByYearErrors[keyof GetAllocationsByYearErrors];

export type GetAllocationsByYearResponses = {
    /**
     * Successful Response
     */
    200: FacultySubjectAllocationListResponse;
};

export type GetAllocationsByYearResponse = GetAllocationsByYearResponses[keyof GetAllocationsByYearResponses];

export type UpdateAllocationsData = {
    body: AllocationUpdateRequest;
    path?: never;
    query?: never;
    url: '/api/priority/allocations';
};

export type UpdateAllocationsErrors = {
    /**
     * Validation Error
     */
    422: HttpValidationError;
};

export type UpdateAllocationsError = UpdateAllocationsErrors[keyof UpdateAllocationsErrors];

export type UpdateAllocationsResponses = {
    /**
     * Successful Response
     */
    200: SuccessResponse;
};

export type UpdateAllocationsResponse = UpdateAllocationsResponses[keyof UpdateAllocationsResponses];

export type GetAllTimetableFormatsData = {
    body?: never;
    path?: never;
    query?: never;
    url: '/api/timetable-formats/formats';
};

export type GetAllTimetableFormatsResponses = {
    /**
     * Response Get All Timetable Formats
     * Successful Response
     */
    200: Array<TimetableFormatResponse>;
};

export type GetAllTimetableFormatsResponse = GetAllTimetableFormatsResponses[keyof GetAllTimetableFormatsResponses];

export type CreateTimetableFormatData = {
    body: TimetableFormatCreate;
    path?: never;
    query?: never;
    url: '/api/timetable-formats/formats';
};

export type CreateTimetableFormatErrors = {
    /**
     * Validation Error
     */
    422: HttpValidationError;
};

export type CreateTimetableFormatError = CreateTimetableFormatErrors[keyof CreateTimetableFormatErrors];

export type CreateTimetableFormatResponses = {
    /**
     * Successful Response
     */
    201: SuccessResponse;
};

export type CreateTimetableFormatResponse = CreateTimetableFormatResponses[keyof CreateTimetableFormatResponses];

export type GetTimetableFormatsByYearData = {
    body?: never;
    path: {
        /**
         * Year Id
         * ID of the academic year
         */
        year_id: number;
    };
    query?: never;
    url: '/api/timetable-formats/formats/year/{year_id}';
};

export type GetTimetableFormatsByYearErrors = {
    /**
     * Validation Error
     */
    422: HttpValidationError;
};

export type GetTimetableFormatsByYearError = GetTimetableFormatsByYearErrors[keyof GetTimetableFormatsByYearErrors];

export type GetTimetableFormatsByYearResponses = {
    /**
     * Response Get Timetable Formats By Year
     * Successful Response
     */
    200: Array<TimetableFormatResponse>;
};

export type GetTimetableFormatsByYearResponse = GetTimetableFormatsByYearResponses[keyof GetTimetableFormatsByYearResponses];

export type GetTimetableFormatsByYearAndBatchData = {
    body?: never;
    path: {
        /**
         * Year Id
         * ID of the academic year
         */
        year_id: number;
        /**
         * Batch Id
         * ID of the batch
         */
        batch_id: number;
    };
    query?: never;
    url: '/api/timetable-formats/formats/year/{year_id}/batch/{batch_id}';
};

export type GetTimetableFormatsByYearAndBatchErrors = {
    /**
     * Validation Error
     */
    422: HttpValidationError;
};

export type GetTimetableFormatsByYearAndBatchError = GetTimetableFormatsByYearAndBatchErrors[keyof GetTimetableFormatsByYearAndBatchErrors];

export type GetTimetableFormatsByYearAndBatchResponses = {
    /**
     * Response Get Timetable Formats By Year And Batch
     * Successful Response
     */
    200: Array<TimetableFormatResponse>;
};

export type GetTimetableFormatsByYearAndBatchResponse = GetTimetableFormatsByYearAndBatchResponses[keyof GetTimetableFormatsByYearAndBatchResponses];

export type DeleteTimetableFormatData = {
    body?: never;
    path: {
        /**
         * Format Id
         * ID of the timetable format
         */
        format_id: number;
    };
    query?: never;
    url: '/api/timetable-formats/formats/{format_id}';
};

export type DeleteTimetableFormatErrors = {
    /**
     * Validation Error
     */
    422: HttpValidationError;
};

export type DeleteTimetableFormatError = DeleteTimetableFormatErrors[keyof DeleteTimetableFormatErrors];

export type DeleteTimetableFormatResponses = {
    /**
     * Successful Response
     */
    200: SuccessResponse;
};

export type DeleteTimetableFormatResponse = DeleteTimetableFormatResponses[keyof DeleteTimetableFormatResponses];

export type GetTimetableFormatByIdData = {
    body?: never;
    path: {
        /**
         * Format Id
         * ID of the timetable format
         */
        format_id: number;
    };
    query?: never;
    url: '/api/timetable-formats/formats/{format_id}';
};

export type GetTimetableFormatByIdErrors = {
    /**
     * Validation Error
     */
    422: HttpValidationError;
};

export type GetTimetableFormatByIdError = GetTimetableFormatByIdErrors[keyof GetTimetableFormatByIdErrors];

export type GetTimetableFormatByIdResponses = {
    /**
     * Successful Response
     */
    200: TimetableFormatResponse;
};

export type GetTimetableFormatByIdResponse = GetTimetableFormatByIdResponses[keyof GetTimetableFormatByIdResponses];

export type UpdateTimetableFormatData = {
    body: TimetableFormatUpdate;
    path: {
        /**
         * Format Id
         * ID of the timetable format
         */
        format_id: number;
    };
    query?: never;
    url: '/api/timetable-formats/formats/{format_id}';
};

export type UpdateTimetableFormatErrors = {
    /**
     * Validation Error
     */
    422: HttpValidationError;
};

export type UpdateTimetableFormatError = UpdateTimetableFormatErrors[keyof UpdateTimetableFormatErrors];

export type UpdateTimetableFormatResponses = {
    /**
     * Successful Response
     */
    200: SuccessResponse;
};

export type UpdateTimetableFormatResponse = UpdateTimetableFormatResponses[keyof UpdateTimetableFormatResponses];

export type CreateTimetableModuleData = {
    body: TimetableModuleCreate;
    path?: never;
    query?: never;
    url: '/api/timetable-modules/';
};

export type CreateTimetableModuleErrors = {
    /**
     * Validation Error
     */
    422: HttpValidationError;
};

export type CreateTimetableModuleError = CreateTimetableModuleErrors[keyof CreateTimetableModuleErrors];

export type CreateTimetableModuleResponses = {
    /**
     * Timetable module created successfully
     */
    201: SuccessResponse;
};

export type CreateTimetableModuleResponse = CreateTimetableModuleResponses[keyof CreateTimetableModuleResponses];

export type GetTimetablesByYearData = {
    body?: never;
    path: {
        /**
         * Year Id
         */
        year_id: number;
    };
    query?: never;
    url: '/api/timetable-modules/year/{year_id}';
};

export type GetTimetablesByYearErrors = {
    /**
     * Validation Error
     */
    422: HttpValidationError;
};

export type GetTimetablesByYearError = GetTimetablesByYearErrors[keyof GetTimetablesByYearErrors];

export type GetTimetablesByYearResponses = {
    /**
     * Timetables retrieved successfully
     */
    200: TimetableModuleListResponse;
};

export type GetTimetablesByYearResponse = GetTimetablesByYearResponses[keyof GetTimetablesByYearResponses];

export type GetTimetableByYearAndBatchData = {
    body?: never;
    path: {
        /**
         * Year Id
         */
        year_id: number;
        /**
         * Batch Id
         */
        batch_id: number;
    };
    query?: never;
    url: '/api/timetable-modules/year/{year_id}/batch/{batch_id}';
};

export type GetTimetableByYearAndBatchErrors = {
    /**
     * Validation Error
     */
    422: HttpValidationError;
};

export type GetTimetableByYearAndBatchError = GetTimetableByYearAndBatchErrors[keyof GetTimetableByYearAndBatchErrors];

export type GetTimetableByYearAndBatchResponses = {
    /**
     * Timetable retrieved successfully
     */
    200: TimetableModuleResponse;
};

export type GetTimetableByYearAndBatchResponse = GetTimetableByYearAndBatchResponses[keyof GetTimetableByYearAndBatchResponses];

export type DeleteTimetableModuleData = {
    body?: never;
    path: {
        /**
         * Timetable Id
         * ID of the timetable
         */
        timetable_id: number;
    };
    query?: never;
    url: '/api/timetable-modules/{timetable_id}';
};

export type DeleteTimetableModuleErrors = {
    /**
     * Validation Error
     */
    422: HttpValidationError;
};

export type DeleteTimetableModuleError = DeleteTimetableModuleErrors[keyof DeleteTimetableModuleErrors];

export type DeleteTimetableModuleResponses = {
    /**
     * Timetable deleted successfully
     */
    200: SuccessResponse;
};

export type DeleteTimetableModuleResponse = DeleteTimetableModuleResponses[keyof DeleteTimetableModuleResponses];

export type GetTimetableByIdData = {
    body?: never;
    path: {
        /**
         * Timetable Id
         * ID of the timetable
         */
        timetable_id: number;
    };
    query?: never;
    url: '/api/timetable-modules/{timetable_id}';
};

export type GetTimetableByIdErrors = {
    /**
     * Validation Error
     */
    422: HttpValidationError;
};

export type GetTimetableByIdError = GetTimetableByIdErrors[keyof GetTimetableByIdErrors];

export type GetTimetableByIdResponses = {
    /**
     * Timetable retrieved successfully
     */
    200: TimetableModuleResponse;
};

export type GetTimetableByIdResponse = GetTimetableByIdResponses[keyof GetTimetableByIdResponses];

export type UpdateTimetableModuleData = {
    body: TimetableModuleUpdate;
    path: {
        /**
         * Timetable Id
         * ID of the timetable
         */
        timetable_id: number;
    };
    query?: never;
    url: '/api/timetable-modules/{timetable_id}';
};

export type UpdateTimetableModuleErrors = {
    /**
     * Validation Error
     */
    422: HttpValidationError;
};

export type UpdateTimetableModuleError = UpdateTimetableModuleErrors[keyof UpdateTimetableModuleErrors];

export type UpdateTimetableModuleResponses = {
    /**
     * Timetable updated successfully
     */
    200: SuccessResponse;
};

export type UpdateTimetableModuleResponse = UpdateTimetableModuleResponses[keyof UpdateTimetableModuleResponses];

export type CreateWorkflowStageData = {
    body: WorkflowStageCreate;
    path?: never;
    query?: never;
    url: '/api/workflow/workflow/create';
};

export type CreateWorkflowStageErrors = {
    /**
     * Validation Error
     */
    422: HttpValidationError;
};

export type CreateWorkflowStageError = CreateWorkflowStageErrors[keyof CreateWorkflowStageErrors];

export type CreateWorkflowStageResponses = {
    /**
     * Successful Response
     */
    200: SuccessResponse;
};

export type CreateWorkflowStageResponse = CreateWorkflowStageResponses[keyof CreateWorkflowStageResponses];

export type GetWorkflowStageByYearData = {
    body?: never;
    path: {
        /**
         * Year Id
         */
        year_id: number;
    };
    query?: never;
    url: '/api/workflow/workflow/year/{year_id}';
};

export type GetWorkflowStageByYearErrors = {
    /**
     * Validation Error
     */
    422: HttpValidationError;
};

export type GetWorkflowStageByYearError = GetWorkflowStageByYearErrors[keyof GetWorkflowStageByYearErrors];

export type GetWorkflowStageByYearResponses = {
    /**
     * Successful Response
     */
    200: unknown;
};

export type IncrementWorkflowStepData = {
    body?: never;
    path: {
        /**
         * Year Id
         */
        year_id: number;
    };
    query?: never;
    url: '/api/workflow/workflow/increment/{year_id}';
};

export type IncrementWorkflowStepErrors = {
    /**
     * Validation Error
     */
    422: HttpValidationError;
};

export type IncrementWorkflowStepError = IncrementWorkflowStepErrors[keyof IncrementWorkflowStepErrors];

export type IncrementWorkflowStepResponses = {
    /**
     * Successful Response
     */
    200: unknown;
};

export type CompleteWorkflowData = {
    body?: never;
    path: {
        /**
         * Year Id
         */
        year_id: number;
    };
    query?: never;
    url: '/api/workflow/workflow/complete/{year_id}';
};

export type CompleteWorkflowErrors = {
    /**
     * Validation Error
     */
    422: HttpValidationError;
};

export type CompleteWorkflowError = CompleteWorkflowErrors[keyof CompleteWorkflowErrors];

export type CompleteWorkflowResponses = {
    /**
     * Successful Response
     */
    200: SuccessResponse;
};

export type CompleteWorkflowResponse = CompleteWorkflowResponses[keyof CompleteWorkflowResponses];

export type SayHelloGetData = {
    body?: never;
    path?: never;
    query?: never;
    url: '/';
};

export type SayHelloGetResponses = {
    /**
     * Successful Response
     */
    200: unknown;
};

export type ClientOptions = {
    baseURL: 'http://localhost:3000' | (string & {});
};